<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://liuyuan1002.github.io</id>
    <title>liuyuan1002</title>
    <updated>2022-01-01T08:12:38.903Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://liuyuan1002.github.io"/>
    <link rel="self" href="https://liuyuan1002.github.io/atom.xml"/>
    <subtitle>学习笔记</subtitle>
    <logo>https://liuyuan1002.github.io/images/avatar.png</logo>
    <icon>https://liuyuan1002.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, liuyuan1002</rights>
    <entry>
        <title type="html"><![CDATA[（SDL）05 - 代码扫描相关]]></title>
        <id>https://liuyuan1002.github.io/post/dai-ma-sao-miao-xiang-guan/</id>
        <link href="https://liuyuan1002.github.io/post/dai-ma-sao-miao-xiang-guan/">
        </link>
        <updated>2021-04-28T03:20:14.000Z</updated>
        <content type="html"><![CDATA[<h1 id="0x00-snoar-平台">0x00 snoar 平台</h1>
<h1 id="0x01-扫描引擎">0x01 扫描引擎</h1>
<h2 id="1-engine-x">1. engine-x</h2>
<p>java\c\C++\python\PHP</p>
<h2 id="2-flake8">2. flake8</h2>
<p>python</p>
<h2 id="3-pylints">3. pylints</h2>
<p>python</p>
<h2 id="4-eslint">4. eslint</h2>
<p>JS</p>
<h2 id="5-shellcheck">5. shellcheck</h2>
<p>shell</p>
<h2 id="6-luacheck">6. luacheck</h2>
<h2 id="7-coverity">7. coverity</h2>
<p>https://github.com/jenkinsci/coverity-plugin</p>
<h2 id="8-foritiy">8. foritiy</h2>
<p>java\Golang\JS\PHP\Python\C\C++</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[（SDL）00 - SDL流程总览]]></title>
        <id>https://liuyuan1002.github.io/post/00-sdl-liu-cheng-zong-lan/</id>
        <link href="https://liuyuan1002.github.io/post/00-sdl-liu-cheng-zong-lan/">
        </link>
        <updated>2021-04-28T01:16:00.000Z</updated>
        <content type="html"><![CDATA[<p>01 - 安全需求和规划（历史安全问题修复）<br>
02 - 威胁建模<br>
03 - 第三方组件合规性检查<br>
04 - 危险函数代码自检<br>
05 - 代码扫描<br>
06 - 第三方组件合规性扫描<br>
07 - 源码审计<br>
08 - 渗透测试（安全需求、威胁分析复测；工具渗透测试；手工渗透测试）<br>
09 - 安全运维<br>
10 - 应急响应<br>
11 - 安全运营</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[（web安全）08 - URL重定向钓鱼]]></title>
        <id>https://liuyuan1002.github.io/post/08-url-chong-ding-xiang-diao-yu/</id>
        <link href="https://liuyuan1002.github.io/post/08-url-chong-ding-xiang-diao-yu/">
        </link>
        <updated>2020-03-27T09:44:09.000Z</updated>
        <content type="html"><![CDATA[<h2 id="0x00-原理">0x00 原理</h2>
<p>服务端对传入的URL变量检测不严格。，可能导致可而已构造一个恶意地址，诱导用户点击。</p>
<p>原因：</p>
<ol>
<li>没考虑任意URL跳转</li>
<li>用取子串、去后缀等方式简单判断。逻辑绕过</li>
<li>对传入参数做一些奇葩操作（域名剪切/拼接/重组）和判断，适得其反</li>
<li>原始语言自带解析URL、判断域名的函数库出现逻辑漏洞或者意外特性，可被绕过</li>
<li>原始语言、服务器/容器特性、浏览器等对标准URL协议解析处理等差异性导致被绕过</li>
</ol>
<h2 id="0x01-攻击点">0x01 攻击点</h2>
<ol>
<li>META 标签也跳转</li>
<li>javascript 跳转</li>
<li>header头跳转</li>
</ol>
<p>代码关键字:</p>
<pre><code>    inurl、go、redirect、url、redirectUrl、callback、return_url、toUrl、ReturnUrl、fromUrl、redUrl、request、redirect_to、redirect_url、jump、jump_to、target、to、goto、link、linkto、domain、oauth_callback
</code></pre>
<h2 id="0x02-攻击绕过">0x02 攻击绕过</h2>
<blockquote>
<p>https://www.anquanke.com/post/id/94377</p>
</blockquote>
<ol>
<li>句号  加二级域名</li>
<li>斜杠 加二级域名</li>
<li>@绕过</li>
<li>白名单跳转，aaa.com 在白名单时，注册一个123aaa.com</li>
<li>多重验证</li>
<li>xip.io</li>
<li>#号</li>
</ol>
<h2 id="0x03-修复">0x03 修复</h2>
<ol>
<li>若跳转的URL事先是可以确定的，包括url和参数的值，则可以在后台先配置好，url参数只需传对应url的索引即可，通过索引找到对应具体url再进行跳转；</li>
<li>若跳转的URL事先不确定，但其输入是由后台生成的（不是用户通过参数传人），则可以先生成好跳转链接然后进行签名，而跳转链接首先需要进行验证签名通过才能进行跳转；</li>
<li>若1和2都不满足，url事先无法确定，只能通过前端参数传入，则必须在跳转的时候对url进行按规则校验：即控制url是否是授权的白名单或者是符合规则的url： function checkURL ( sURL) { return (/<sup>(https?😕/)?[\w-.]+.(yourDomainA|yourDomainB|yourDomainC).com($|/|)/i).test(sUrl)||(/^[\w][\w/.-_%]+$/i).test(sUrl)||(/</sup>[/][^/]/i).test(sUrl) ? true : false; }</li>
<li>XSS漏洞的注意事项 ：跳转url检测中也加入了CRLF头部注入漏洞的检测逻辑, 具体就是在请求参数中加入了%0d%0a这种测试代码，需要对这些参数进行删除处理(事实上：在判断到一个参数中包含 %00 -&gt; %1f 的控制字符时都是不合法的，需对其进行删除)。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[（web安全）07 - XXE]]></title>
        <id>https://liuyuan1002.github.io/post/06-xxe/</id>
        <link href="https://liuyuan1002.github.io/post/06-xxe/">
        </link>
        <updated>2020-03-27T09:30:52.000Z</updated>
        <content type="html"><![CDATA[<h2 id="0x00-原理">0x00 原理</h2>
<blockquote>
<p>https://mp.weixin.qq.com/s/jvbZ6Andk_oQEo9cXA_daQ?</p>
</blockquote>
<p>XML External Entity，XML外部实体注入。为了使应用程序使用这些自定义的XML消息，应用程序必须去解析XML文档并检查格式是否正确。如果应用是通过用户上传处理XML文件或POST请求的，那么很有可能会受到XXE攻击。<br>
<strong>危害：</strong><br>
当允许引用外部实体时，通过构造恶意内容，可导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等危害。</p>
<h2 id="0x01-xml原理">0x01 XML原理</h2>
<p>（1）内部的 DOCTYPE 声明</p>
<!DOCTYPE 根元素 [元素声明]>
<p>（2）外部文档声明</p>
<!DOCTYPE 根元素 SYSTEM ”文件名”>
<ol>
<li>DTD 实体<br>
内部实体申明  <!ENTITY 实体名称 “值”><br>
外部实体申明   <!ENTITY 实体名称 “URL”><br>
参数实体申明  <!ENTITY %实体名称 “值”>  <!ENTITY %实体名称 “URL”></li>
</ol>
<h2 id="0x02-xxe-外部实体注入">0x02 XXE -外部实体注入</h2>
<h4 id="攻击点">攻击点</h4>
<ol>
<li>以XML作为数据传输</li>
<li>OpenXML文件解析  docx、pptx\svg</li>
<li>基于XML的数据格式 SAML 、WSDL</li>
</ol>
<h4 id="攻击方式分类">攻击方式分类</h4>
<ol>
<li>正常回显XXE</li>
<li>报错XXE</li>
<li>无回显XXE</li>
</ol>
<h4 id="攻击手段">攻击手段</h4>
<ol>
<li>读取任意文件  <!ENTITY f SYSTEM "file:///etc/passwd"></li>
<li>执行系统命令  <!ENTITY f SYSTEM "expect://id"></li>
<li>探测内网端口 <!ENTITY Quan SYSTEM "http://192.168.246.136:80"></li>
</ol>
<h3 id="0x03-xxe实战">0x03 XXE实战</h3>
<ol>
<li>PHP<br>
（1）探测内网端口、指纹识别。通过Http协议  <!DOCTYPE user SYSTEM ”http://127.0.0.1:28895”>  
  <!ENTITY user  “http://127.0.0.1:28895”> &user
绕过 127.0.0.1禁用。  xip.io公用解析服务<br>
10.0.0.1.xip.io   resolves to   10.0.0.1<br>
www.10.0.0.1.xip.io   resolves to   10.0.0.1<br>
mysite.10.0.0.1.xip.io   resolves to   10.0.0.1<br>
foo.bar.10.0.0.1.xip.io   resolves to   10.0.0.1<br>
（2）DOS 攻击，通过实体引用造成内存开销 -10^30次方的实体引用</li>
</ol>
<p>（3）命令执行     expect://command</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[（web安全）06 - SSRF]]></title>
        <id>https://liuyuan1002.github.io/post/06-ssrf/</id>
        <link href="https://liuyuan1002.github.io/post/06-ssrf/">
        </link>
        <updated>2020-03-27T09:14:13.000Z</updated>
        <content type="html"><![CDATA[<h2 id="0x00-原理">0x00 原理</h2>
<p>即服务器端请求伪造</p>
<p>危害：<br>
1. 内外网端口扫描<br>
2. 内网主机敏感信息<br>
3. 对通过HTTP方式内网web发起进攻<br>
4. 与XXE组成攻击链<br>
5.  攻击内网程序，例如redis未授权</p>
<h2 id="0x01-攻击点">0x01 攻击点</h2>
<p>漏洞点：<br>
1. 通过URL分享内容<br>
2. 文件处理、编码处理、转码等服务<br>
3. 通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览<br>
4. 在线翻译 通过URL地址加载与下载图片<br>
5.图片、文章的收藏<br>
6. 设置邮件接收服务器<br>
7. 从URL关键字寻找 share、wap、url、link、src、source、target、u、3g、display、sourceURl、imageURL、domain...</p>
<h2 id="0x02-攻击方式">0x02 攻击方式</h2>
<p>gopher ：   https://xz.aliyun.com/t/5844<br>
绕过： 127.0.0.1IP           被禁用<br>
1.  八进制、16进制。127.0.0.1甚至可以缩写为127.1<br>
2. url解析 baidu.com@127.0.0.1  其实就是请求127.0.0.1<br>
3. xip.io 利用302跳转<br>
4. 句号  127。0。0。1<br>
5. 短地址</p>
<h2 id="0x03-防御">0x03 防御</h2>
<pre><code>1. 返回展示前，先检查数据是否符合标准
2. 统一错误信息
3. 限制请求的端口为http常用的端口，比如，80,443,8080,8090。
4. 黑名单内网ip。避免应用被用来获取获取内网数据，攻击内网。
5. 禁用不需要的协议。仅仅允许http和https请求。可以防止类似于file:///,gopher://,ftp:// 等引起的问题</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[（web安全）05 - CSRF]]></title>
        <id>https://liuyuan1002.github.io/post/05-csrf/</id>
        <link href="https://liuyuan1002.github.io/post/05-csrf/">
        </link>
        <updated>2020-03-26T09:12:34.000Z</updated>
        <content type="html"><![CDATA[<h2 id="0x00-原理">0x00 原理</h2>
<p>CSRF 攻击者盗用了你的身份（即用了你的COOKIE），以你的名义进行某些非法操作。CSRF能够修改你的密码，使用你的账户发送邮件，获取你的敏感信息，甚至盗走你的财产等</p>
<h2 id="0x01-测试方法">0x01 测试方法</h2>
<p>自动检测：AWVS扫描器 半自动检测：CSRFTester<br>
手动：  去掉token  去掉refer</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[（web安全）04 - JSONP 劫持跨域]]></title>
        <id>https://liuyuan1002.github.io/post/04-jsonp-jie-chi-kua-yu/</id>
        <link href="https://liuyuan1002.github.io/post/04-jsonp-jie-chi-kua-yu/">
        </link>
        <updated>2020-03-25T08:59:34.000Z</updated>
        <content type="html"><![CDATA[<h2 id="0x00-原理">0x00 原理</h2>
<p>Jsonp(JSON with Padding) 是 json 的一种&quot;使用模式&quot;，可以让网页从别的域名（网站）那获取资料，即跨域读取数据。</p>
<p>同源策略限制无法跨域<br>
浏览器：同协议、同主机、同域名（同二级域名）、同端口 即为同源</p>
<h2 id="0x01-使用">0x01 使用</h2>
<p>script src属性用来跨域。</p>
<h2 id="0x02-预防-corscross-origin-resource-sharing">0x02 预防 CORS(Cross-Origin Resource Sharing)</h2>
<ol>
<li>向API响应添加Access-Control-Allow-Origin header<br>
Access-Control-Allow-Origin: reports.verysecurebank.ro:</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[（web安全）03 - XSS（跨站脚本漏洞）]]></title>
        <id>https://liuyuan1002.github.io/post/03-xsskua-zhan-jiao-ben-lou-dong/</id>
        <link href="https://liuyuan1002.github.io/post/03-xsskua-zhan-jiao-ben-lou-dong/">
        </link>
        <updated>2020-03-25T08:43:23.000Z</updated>
        <content type="html"><![CDATA[<h2 id="0x00-原理">0x00 原理</h2>
<blockquote>
<p>cross site Scripting  简称 XSS.<br>
XSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java、 VBScript、ActiveX、 Flash 或者甚至是普通的HTML。</p>
</blockquote>
<p><strong>危害：</strong></p>
<ol>
<li>JS能做的东西，都能做。</li>
<li>对受害者可能采用cookie资料窃取 回话劫持 钓鱼欺骗等攻击手段、</li>
<li>强制弹出广告页面 刷流量</li>
<li>网页挂马(可看上篇文章)</li>
<li>提升用户权限 进一步渗透网站</li>
<li>传播跨站脚本蠕虫等</li>
</ol>
<h2 id="0x01-分类">0x01 分类</h2>
<p>1、反射型XSS<br>
非持久化，需要欺骗用户自己去点击链接才能触发XSS代码,本文主要以本类型进行介绍</p>
<ol>
<li>设置圈套</li>
<li>受害者浏览恶意软件</li>
<li>跳转至攻击对象服务器（js作为参数包含其中）</li>
<li>攻击对象网站生成包含JS的网页</li>
<li>JS在受害着浏览器中被执行</li>
</ol>
<p>可以将当前网站的cookie发送给攻击着。攻击这可以利用cookie登录网站。</p>
<script>document.cookie</script>
<p>2、存储型<br>
把用户输入的数据存储在服务器端。这种XSS具有很强的稳定性。常见于留言板、文章中。</p>
<ol>
<li>留言板上留言中设置js</li>
<li>管理员查看留言，直接触发JS</li>
</ol>
<p>3、DOM型<br>
也是一种反射型XSS，由于历史原因被单独列出来了。通过修改页面的DOM节点形成的XSS，称之为DOMBased XSS。<br>
常见：location.href()<br>
xss.html#javascript:alert(11)</p>
<h2 id="0x02-攻击方式">0x02 攻击方式</h2>
<ol>
<li>
<p>标签闭合<br>
？name=aa&quot;;alert(1);&quot;   左右标签&quot; &quot;闭合<br>
？name=aa%df&quot;;alert(1);//  宽字节<br>
&lt;img src=0 onerror='alert(11')&gt;</p>
</li>
<li>
<p>输出到标签类型<br>
&lt;input type=&quot;text value='$'&gt;        aa' onmouserover=prompt(11) bad'<br>
过滤尖括号没有用</p>
</li>
<li>
<p>输入到HTML事件</p>
</li>
<li>
<p>编码绕过<br>
Unicode编码 &amp;#39<br>
URL编码<br>
base64编码</p>
</li>
<li>
<p>浏览器功能导致标签闭合<br>
&lt;img src='aa onError=alert(1)<br>
输入不闭合标签。导致浏览器自动闭合其他标签。</p>
</li>
<li>
<p>隐藏标签XSS</p>
</li>
</ol>
<h2 id="0x03-漏洞检测">0x03 漏洞检测</h2>
<p>最重要考虑哪里有输入、输入的数据哪里会输出。</p>
<ol>
<li>输入敏感字符：  、&quot;  ' &lt;  &gt;  (  )提交后查看是否被转义。</li>
<li>盲打\hackbar 中XSS playload<br>
https://github.com/payloadbox/xss-payload-list<br>
攻击点：</li>
<li>URL</li>
<li>输入框</li>
<li>抓包重放</li>
</ol>
<h2 id="0x04-防御">0x04 防御</h2>
<ol>
<li>
<p>输入与输出中的过滤</p>
</li>
<li>
<p>黑名单与白名单</p>
</li>
<li>
<p>web安全编码规范</p>
</li>
<li>
<p>给开发这的终极xss防御备忘录<br>
XSS编码：</p>
<pre><code>     1. HTML五大元素
     2. 编码  
         实体编码：    如&lt; 实体编码为&amp;#60
         JavaScript编码：  \uxxxx 
         URL编码： %XX
     3. 解码。 先  HTML解码对HTML文档解码，并创建DOM树。在进行URL解码，最后进行JavaScript编码
     4. 实体解码:
         数据状态中字符转换
         RCDATA  &lt;textarea&gt; &lt;title&gt; 仅能容纳文本和字符应用。不容容纳元素
         属性值解析器
         
     5. URL解码：
         不能解码任何协议类型   javascript:  冒号也不能被解码
         协议、用户名、密码必须是ASCII
     6. JavaScript解码：
         仅解码以下字符：
             字符串中（in String）
             标识符中（in identifier names）如：&lt;script&gt;\u0061\u006c\u0065\u0072\u0074(10);&lt;/script&gt;
             控制字符中（in control characters）如：控制字符即'、&quot;、()等。
             Unicode序列只有出现在标识符中时，才能被正常的解码解释 
</code></pre>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[（web安全）02 - SQL注入]]></title>
        <id>https://liuyuan1002.github.io/post/02-sql-zhu-ru/</id>
        <link href="https://liuyuan1002.github.io/post/02-sql-zhu-ru/">
        </link>
        <updated>2020-03-24T06:31:25.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>SQL 实战地址https://github.com/Audi-1/sqli-labs</p>
</blockquote>
<h2 id="0x00-原理">0x00 原理</h2>
<blockquote>
<p>https://github.com/hongriSec/Web-Security-Attack/blob/master/Part1/Day1/files/README.md</p>
</blockquote>
<p>都后台对用户输入的语句，进行拼接、并查询数据库。导致数据库内容泄露。</p>
<h2 id="0x01-攻击方式">0x01 攻击方式</h2>
<ol>
<li>带内注入：<br>
-基于错误的SQL语句<br>
-基于联合的SQL  union all</li>
<li>盲注。无法返回注入成功与否</li>
<li>带外注入：</li>
</ol>
<h2 id="0x02-实战">0x02 实战</h2>
<ol>
<li>
<p>https://www.cnblogs.com/qq3285862072/p/9439573.html<br>
1）当输入单引号时，返回错误页面，则可能存在SQL注入<br>
2）Url 地址中输入 http://xxx/abc.php?id= x and 1=1 页面依旧运行正常，继续进行下一步<br>
Url 地址中继续输入 http://xxx/abc.php?id= x and 1=2 页面运行错误<br>
则说明此 Sql 注入为数字型注入。<br>
3）Url 地址中输入 http://xxx/abc.php?id= x' and '1'='1 页面运行正常，继续进行下一步。<br>
Url 地址中继续输入 http://xxx/abc.php?id= x' and '1'='2 页面运行错误<br>
1) or判断<br>
5）xor判断<br>
6） 减号判断<br>
则说明此 Sql 注入为字符型注入。</p>
</li>
<li>
<p>https://www.cnblogs.com/Qiuzhiyu/p/11666688.html</p>
</li>
<li>
<p>搜索型  %</p>
</li>
<li>
<p>盲注：<br>
'&quot; or if(1<mark>1) sleep(5,1)<br>
'&quot; or if(1</mark>2) sleep(5,1)</p>
</li>
<li>
<p>注释<br>
-- 这种后面有空格</p>
<h1 id=""></h1>
<p>/* */ 注释符号内内容</p>
</li>
<li>
<p>insert注入： 报错测试 updatexml（）   extractValue（）</p>
</li>
<li>
<p>update注入： updatexml（）</p>
</li>
<li>
<p>delete注入： updatexml（）</p>
</li>
<li>
<p>order by注入：  注入点 在代码order by之后  IF（1=1，name，price） 则存在注入。</p>
</li>
<li>
<p>堆叠注入原理：  ；分号注入。后面后在自己的SQL语句</p>
</li>
<li>
<p>union注入： 需要有回显，不然无法判断。</p>
</li>
<li>
<p>宽字节注入：网站存在编码和数据库编码不一致。网站GBK、mysql unicode  。%df'  -&gt;%df'  -&gt;%df%5c' -&gt; 汉字'  达到闭合效果</p>
</li>
<li>
<p>二次注入： 两个HTTP请求。第一个请求插入脏数据如1' 。第二个请求会把 1' 取出来时不做过滤，直接使用。<br>
https://www.freebuf.com/articles/web/167089.html<br>
注册 test'# 用户。修改密码时可以直接修改掉 test 密码</p>
</li>
</ol>
<h2 id="0x03-防御">0x03  防御</h2>
<ol>
<li>过滤</li>
<li>预编译</li>
</ol>
<h2 id="附实战环境搭建-sqlii-libs">附：实战环境搭建  sqlii-libs</h2>
<pre><code> &quot;mysql_&quot;批量替换为&quot;mysqli_&quot;
 mysqli_query($sql)   修改为    mysqli_query($con, $sql)
 mysqli_select_db（）  参数顺序
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[（web安全）01 - HTTP参数安全]]></title>
        <id>https://liuyuan1002.github.io/post/01-http-can-shu-an-quan/</id>
        <link href="https://liuyuan1002.github.io/post/01-http-can-shu-an-quan/">
        </link>
        <updated>2020-03-23T06:30:03.000Z</updated>
        <content type="html"><![CDATA[<h2 id="常见漏洞类型">常见漏洞类型</h2>
<ol>
<li>
<p>User-Agent BASH漏洞</p>
<blockquote>
<p>https://www.freebuf.com/vuls/44994.html</p>
</blockquote>
<p>在处理(){ 开头的函数环境变量时，并没有一函数结尾｝为结束，而是一直执行其后的shell命令</p>
<pre><code>Host: **.**.**.**
User-Agent: () { :;}; echo `/bin/cat /etc/passwd`
Accept:   text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 
</code></pre>
</li>
<li>
<p>User-Agent SQL注入 ,WooYun-2016-0184092</p>
<blockquote>
<p>https://www.uedbox.com/post/12630/</p>
</blockquote>
</li>
<li>
<p>X-Forwarded-For伪造 ，绕开IP限制</p>
</li>
<li>
<p>IIS WEBDAV 默认开启了DELETE、PUT等方法。<br>
当有IIS配置有写入权限时。就可以直接上传文件。</p>
</li>
<li>
<p>Tomcat 文件上传漏洞。<br>
CVE-2017-12615。Tomcat 7.0.0 to 7.0.79 。开启puts方法时.</p>
</li>
<li>
<p>cookie注入</p>
</li>
<li>
<p>CRLF注入   %0d%0a<br>
HTTP Header与HTTP Body是通过两个CRLF分隔， 而浏览器是根据这两个CRLF来取出HTTP 内容并显示出来。攻击者一旦能够控制HTTP 消息头中的字符，注入一些恶意的换行，这就能注入一些会话Cookie或者HTML代码。</p>
</li>
<li>
<p>修改返回包状态码。跳过认证。</p>
<blockquote>
<p>http://ip/siteserver/cms/background_templateAdd.aspxPublishmentSystemID=1</p>
</blockquote>
<pre><code>  SiteServer CMS可通过修改返回状态码进入模板页面。
  在模板添加页面。通过修改返回注册码、删除返回包的JS代码方式，注入一句话木马。即可通过菜刀访问ss</code></pre>
</li>
</ol>
]]></content>
    </entry>
</feed>